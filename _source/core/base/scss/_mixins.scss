/////////////////////////////////////////////////
//  Mixins
/////////////////////////////////////////////////

//  Clearfix mixin
/////////////////////////////////////////////////
@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

//  Placeholder crossbrowser mixin
/////////////////////////////////////////////////
@mixin placeholder() {
  &::-webkit-input-placeholder {  
    @content;
  } 
  &:-moz-placeholder {  
    @content;
  } 
  &::-moz-placeholder {
    @content;
  } 
  &:-ms-input-placeholder { 
    @content;
  } 
  &::input-placeholder, {   
    @content;
  }
  &.placeholder { 
    @content;
  }
}

//  Opacity crossbrowser mixin
/////////////////////////////////////////////////
@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=$opacity * 100);
}

//  Responsive appliance mixin
/////////////////////////////////////////////////

// Mobile first mixin
@mixin viewport-from($breakpoint: '') {
  
  @if $breakpoint != '' {
    @media (min-width: #{map-get($viewport_breakpoints, $breakpoint)}) {
      @content;
    }
  }
}

// Large screen first mixin
@mixin viewport-while($breakpoint: '') {
  
  @if $breakpoint != '' {
    @if #{map-get($viewport_breakpoints_max, $breakpoint)} != false {
      @media (max-width: #{map-get($viewport_breakpoints_max, $breakpoint)}) {
        @content;
      }
    }
  }
}

// From and to range mixin
@mixin viewport-from-to($from: '', $to: '') {
  
  @if $from != '' and $to != '' {
    @if map-get($viewport_breakpoints, $from) == 0 {
      @media (max-width: #{map-get($viewport_breakpoints, $to) - 1}) {
        @content;
      }
    } @else {

      @media (min-width: #{map-get($viewport_breakpoints, $from)}) and (max-width: #{map-get($viewport_breakpoints, $to) - 1}) {
        @content;
      }
    }
  }
}

// Direct range mixin
@mixin viewport-range($breakpoint) {
  
  @if $breakpoint != '' {
    @if map-get($viewport_breakpoints, $breakpoint) == 0 {
      @media (max-width: #{map-get($viewport_breakpoints_max, $breakpoint)}) {
        @content;
      }
    } @else {

      @media (min-width: #{map-get($viewport_breakpoints, $breakpoint)}) and (max-width: #{map-get($viewport_breakpoints_max, $breakpoint)}) {
        @content;
      }
    }
  }
}